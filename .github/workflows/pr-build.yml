name: Pull Request Build

on:
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Bazel
        uses: bazel-contrib/setup-bazel@0.14.0
        with:
          # Avoid downloading Bazel every time.
          bazelisk-cache: true
          # Store build cache per workflow.
          disk-cache: ${{ github.workflow }}
          # Share repository cache between workflows.
          repository-cache: true

      - name: Mount bazel cache
        uses: actions/cache@v3
        with:
          path: "~/.cache/bazel"
          key: bazel-cache-${{ runner.os }}-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE', 'MODULE.bazel') }}
          restore-keys: |
            bazel-cache-${{ runner.os }}-

      - name: Check Go formatting
        run: |
          bazel run @io_bazel_rules_go//go -- fmt ./...
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "Go files are not formatted. Please run: bazel run @io_bazel_rules_go//go -- fmt ./..."
            git --no-pager diff
            exit 1
          fi

      - name: Build
        run: bazel build //:client

  # Template for future matrix builds
  # matrix-build:
  #   name: Matrix Build
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     matrix:
  #       os: [ubuntu-latest]
  #       # Uncomment and add more OS options when needed
  #       # os: [ubuntu-latest, macos-latest, windows-latest]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Bazel
  #       uses: bazelbuild/setup-bazelisk@v2
  #
  #     - name: Mount bazel cache
  #       uses: actions/cache@v3
  #       with:
  #         path: "~/.cache/bazel"
  #         key: bazel-cache-${{ matrix.os }}-${{ hashFiles('.bazelversion', '.bazelrc', 'WORKSPACE', 'MODULE.bazel') }}
  #         restore-keys: |
  #           bazel-cache-${{ matrix.os }}-
  #
  #     - name: Build
  #       run: bazel build //:client
